---
- name: initial setup of Locus tool
  hosts: dev
  connection: ssh
  remote_user: "{{ remote_user }}"
  sudo: yes

  vars:
    
  vars_files:
    - locus_vars.yml
    - local_vars.yml

  tasks:

    - name: Get aptitude for upgrade
      tags:
        - base
      apt: pkg=aptitude state=present

    - name: Pycurl dep to run upgrade
      tags:
        - base
      apt: pkg=python-pycurl state=present

    - name: Safe system upgrade via aptitude
      tags:
        - base
      apt: upgrade=safe update_cache=yes cache_valid_time=604800

    - name: add Mapnik repo
      tags:
        - base
      apt_repository: repo='ppa:mapnik/v2.2.0' state=present update_cache=yes

    - name: install base packages
      tags:
        - base
      apt: pkg={{ item }} state=present
      with_items:
        - atop
        - build-essential
        - csstidy
        - gdal-bin
        - git-core
        - gfortran
        - htop
        - libgdal1-dev
        - libgeos-dev
        - liblapack-dev
        - libmapnik
        - libopenblas-dev
        - libpq-dev
        - mapnik-utils
        - mercurial
        - nginx-full
        - postgresql
        - postgresql-9.1-postgis
        - python-dev
        - python-gdal
        - python-mapnik
        - python-numpy
        - python-psycopg2
        - python-scipy
        - python-software-properties
        - python-virtualenv
        - redis-server
        - subversion
        - supervisor
        - sysstat
        - uwsgi
        - vim

    # - name: create celery config for supervisor
    #   notify: restart supervisor
    #   template: src=templates/celeryd.cfg dest=/etc/supervisor/conf.d/celeryd-{{ app_name }}.conf owner=root group={{ remote_user }} mode=0644

    - name: Install python requirements
      pip: name={{item}} state=present virtualenv={{ venv_path }} virtualenv_site_packages=yes
      with_items:
        - xlrd
        - django<1.5
        - django-redis-sessions
        - python-memcached
        - modestmaps
        - django-celery
        - celery
        - django-redis
        - celery-with-redis
        - redis
        - kombu
        - uwsgi>=1.2.6
        - 'git+https://github.com/springmeyer/djmapnik.git@8d736a73470b#egg=djmapnik-0.1.3'
        - 'git+https://github.com/Ecotrust/madrona.git@master#egg=madrona'
        - 'git+git://github.com/perrygeo/TileStache.git@master#egg=TileStache'
        - django-allauth==0.10.1

    - name: git checkout
      when: manage_with_git
      git: repo=https://github.com/Ecotrust/locus.git
           dest={{ project_path }}
           version=master
      tags: 
        - deploy

    - name: go script
      template: src=templates/go.j2 dest=/home/{{ remote_user }}/go owner={{ remote_user }} group={{ remote_user }} mode=0755

    - name: local settings
      tags:
        - deploy
      template: src=templates/local_settings.py.template dest={{ project_path }}/{{ app_name }}/local_settings.py owner={{ remote_user }} group={{ remote_user }} mode=0755
      #NOTE: settings_local -> local_settings! This needs to happen everywhere!

    - name: sql script to fix postgres perms
      template: src=templates/fix_perms.sql dest=/tmp/fix_perms.sql mode=0755

    - name: copy cleangeometry
      copy: src=templates/cleangeometry.sql dest=/tmp/cleangeometry.sql mode=0755

    - name: create db user  
      sudo_user: postgres
      # same as dbname
      postgresql_user: name={{ dbuser }} password={{ dbpwd }} role_attr_flags=CREATEDB,NOSUPERUSER

    - name: create postgres db
      sudo_user: postgres
      register: postgres_create_returncode
      postgresql_db: name={{ dbname }}
                     owner={{ dbuser }}
                     encoding='UTF-8'
                     lc_collate='en_US.UTF-8'
                     lc_ctype='en_US.UTF-8'
                     template='template0'

    - name: load postgis
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
      when: postgres_create_returncode['changed']

    - name: load spatial_ref_sys
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql
      when: postgres_create_returncode['changed']

    - name: load cleangeometry
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /tmp/cleangeometry.sql
      when: postgres_create_returncode['changed']

    - name: postgis perms
      sudo_user: postgres
      command: /usr/bin/psql -d {{ dbname }} -f /tmp/fix_perms.sql 
      when: postgres_create_returncode['changed']

    - name: add srids
      command: "{{ manage }} add_srid"

    # Peer authentication failed for user "vagrant" in next step. Hrm...

    - name: syncdb
      tags:
        - deploy
      command: "{{ manage }} syncdb --noinput"

    - name: migrate 
      tags:
        - deploy
      command: "{{ manage }} migrate --noinput"

    - name: install media
      tags:
        - deploy
      command: "{{ manage }} install_media -a"

    - name: compress media
      tags:
        - deploy
      command: "{{ manage }} synccompress"

    - name: site
      tags:
        - deploy
      command: "{{ manage }} site {{ domain }}"

    - name: install uwsgi app
      notify: restart uwsgi
      template: src=templates/uwsgi.ini dest=/etc/uwsgi/apps-available/{{ app_name }}.ini owner=root group={{ remote_user }} mode=0754

    - name: enable uwsgi app
      file: src=/etc/uwsgi/apps-available/{{ app_name }}.ini dest=/etc/uwsgi/apps-enabled/{{ app_name }}.ini owner=root group={{ remote_user }} state=link

    - name: install nginx site 
      notify: restart nginx
      template: src=templates/nginx.j2 dest=/etc/nginx/sites-available/{{ app_name }} owner=root group={{ remote_user }} mode=0754

    - name: enable nginx site
      file: src=/etc/nginx/sites-available/{{ app_name }} dest=/etc/nginx/sites-enabled/{{ app_name }} owner=root group={{ remote_user }} state=link

    - name: remove default site
      file: path=/etc/nginx/sites-enabled/default state=absent

    - name: stupid uwsgi hack
      file: path=/usr/lib/uwsgi/plugins state=directory

    - name: uwsgi init script to use venv version of uwsgi
      notify: restart uwsgi
      template: src=templates/uwsgi.init.j2 dest=/etc/init.d/uwsgi owner=root group=root mode=0755

    #- name: install wsgi script for TileStache
    #  template: src=templates/tilestache_wsgi.py dest={{ project_path }}/tilestache_wsgi.py owner={{ remote_user }} group={{ remote_user }} mode=0755

    #- name: install uwsgi app for tilestache
    #  notify: restart uwsgi
    #  template: src=templates/tilestache_uwsgi.ini dest=/etc/uwsgi/apps-available/tilestache-{{ app_name }}.ini owner=root group={{ remote_user }} mode=0754

    #- name: enable uwsgi app for tilestache
    #  file: src=/etc/uwsgi/apps-available/tilestache-{{ app_name }}.ini dest=/etc/uwsgi/apps-enabled/tilestache-{{ app_name }}.ini owner=root group={{ remote_user }} state=link

    # COPY datasets
    # depends on the "newdata" variable being defined at the command line
    #    .... -extra-vars "newdata=true"
    #- name: copy data
    #  when: (manage_with_git | bool and newdata | bool)
    #  sudo_user: "{{ remote_user }}"
    #  copy: src=../data dest={{ project_path }}

    # INSTALL data
    - name: install data
      when: newdata is defined and newdata
      notify: 
        - restart supervisor
        # - restart celery
        - restart nginx
        - restart uwsgi
      sudo_user: "{{ remote_user }}"
      command: "{{ manage }} import_planning_units {{ project_path }}/data/planning_units_simple.shp {{ project_path }}/data/metrics.xls {{ project_path }}/data/planning_units_full.shp"

    - name: clear redis cache
      when: newdata is defined and newdata
      command: "redis-cli FLUSHDB"

    - name: clear django cache
      when: newdata is defined and newdata
      command: "{{manage}} clear_cache"

    - name: create social account fixture
      template: src=templates/socialaccounts_template.json dest={{ project_path }}//{{ app_name }}/{{ module_name }}/fixtures/socialaccounts.json  owner={{ remote_user }} group={{ remote_user }} mode=0775

    - name: load social account data
      command: "{{manage}} loaddata {{ project_path }}//{{ app_name }}/{{ module_name }}/fixtures/socialaccounts.json"

    - name: get starspan
      command: 'git clone git://github.com/Ecotrust/starspan.git /tmp/starspan creates=/tmp/starspan'

    - name: build starspan
      shell: "cd /tmp/starspan && if [ ! `which starspan` ]; then ./configure && make && sudo make install; fi"

    ###
    #     Get the raster data
    #         Ecotrusters: gis/projects/projects2013/Locus/raster_data.tar.gz
    #     unzip to /usr/local/apps/locus/data 
    #         result: /usr/local/apps/locus/data/reports/...
    #         NOTE: This location is absolute. A different location will require many changes to the fixture.
    #     run python manage.py loaddata analysis/fixtures/rasters.json

    #     Get the vector data
    #         Ecotrusters: gis/projects/projects2013/Locus/vector_data.tar.gz
    #     unzip to /usr/local/apps/locus/data [or where VECTOR_DATA_LOCATION points in settings_local.py]
    #         result: /usr/local/apps/locus/data/shapefiles/...
    #     run /usr/local/apps/locus/scripts/map_report_vectors.py (this will take some time).
    ###

    - name: copy report data
      when: data_not_loaded
      copy: src={{ data_src }} dest={{ project_path }}/data

    - name: install raster report data
      when: data_not_loaded
      command: "{{ manage }} loaddata {{project_path}}/{{ app_name }}/analysis/fixtures/rasters.json"

    - name: install vector report data
      when: data_not_loaded
      command: "{{ manage }} map_report_vectors"

    ###
    # Get the bioregion and thiessen data
    #     Ecotrusters: gis/projects/projects2013/Locus/DEMO.tar.gz
    # unzip to /usr/local/apps/locus/media
    #     result: /usr/local/apps/locus/media/DEMO/...
    # Set your local settings to include [this should be done by default]:
    #     THIESSEN_LOCATION = '/usr/local/apps/locus/media/DEMO/geo/bioreg_2_polygon.shp'
    #     BIOREGION_LOCATION = '/usr/local/apps/locus/media/DEMO/geo/generated_bioregions_2.shp'
    # Load the user and some initial bioregions:
    #     python manage.py loaddata fbapp/fixtures/gen_bioreg.json
    # run python /usr/local/apps/locus/scripts/map_thiessen.py
    ###

    - name: copy bioregion shapes
      when: data_not_loaded
      copy: src={{ region_src }} dest={{ project_path }}/media

    - name: load bioregion shapes
      when: data_not_loaded
      command: "{{ manage }} loaddata {{ project_path }}/{{ app_name }}/{{ module_name }}/fixtures/gen_bioreg.json"

    - name: map thiessen polygons
      when: data_not_loaded
      command: "/usr/local/venv/locus/bin/python {{ project_path }}/scripts/map_thiessen.py"

    - name: load storypoints
      when: load_demo_data
      command: "{{ manage }} loaddata {{ project_path }}/media/js/demo_data.js"

    - name: set tmp madrona raster_stats permissions
      command: "chmod -R 777 /tmp/madrona.raster_stats"

    # handler to restart services (common include to provision.yml)
    # - name: supervisor
    #   action: service name=supervisor state=started

    # - name: celery
    #   action: supervisorctl name=celeryd-{{ app_name }} state=started

    # - name: nginx
    #   action: service name=nginx state=started

    # - name: uwsgi
    #   action: service name=uwsgi state=started  # started doesn't do the trick with multiple uwsgi apps?

    # - name: restart
    #   tags:
    #     - restart
    #     - deploy
    #   debug: msg="Restarting services..."  # dummy
    #   changed_when: True
    #   notify: 
    #     - restart supervisor
    #     - restart celery
    #     - restart nginx
    #     - restart uwsgi

  handlers: 

    # - name: restart celery
    #   action: supervisorctl name=celeryd-{{ app_name }} state=restarted

    - name: restart nginx
      action: service name=nginx state=reloaded

    - name: restart uwsgi
      action: service name=uwsgi state=restarted

    - name: restart supervisor
      action: service name=supervisor state=restarted

    #https://github.com/Ecotrust/cogs-priorities/blob/master/deploy/provision.yml